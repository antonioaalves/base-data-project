"""Example service implementation for the {{ project_name }} project.

This service demonstrates how to use the process management framework to create
a coordinated multi-stage data processing flow.
"""

import logging
from typing import Dict, Any, Optional, List, Union
from datetime import datetime

# Import base_data_project components
from base_data_project.algorithms.factory import AlgorithmFactory
from base_data_project.data_manager.managers.base import BaseDataManager
from base_data_project.process_management.manager import ProcessManager
from base_data_project.process_management.stage_handler import ProcessStageHandler

# Import project-specific components
from src.config import PROJECT_NAME, CONFIG
from src.models import DataContainerDescansos

# Set up logger
logger = logging.getLogger(PROJECT_NAME)

class ExampleService:
    """
    Example service class that demonstrates how to coordinate data management,
    process tracking, and algorithm execution.
    
    This service implements a complete process flow with multiple stages:
    1. Data Loading: Load data from sources
    2. Data Transformation: Clean and prepare the data
    3. Processing: Apply algorithms to the data
    4. Result Analysis: Analyze and save the results
    """

    def __init__(self, data_manager: BaseDataManager, process_manager: Optional[ProcessManager] = None):
        """
        Initialize the service with data and process managers.
        
        Args:
            data_manager: Data manager for data operations
            process_manager: Optional process manager for tracking
        """
        self.data_manager = data_manager
        self.process_manager = process_manager
        self.current_process_id = None
        self.api_proc_id = None                 # arg1
        self.wfm_proc_id = None                 # arg2
        self.wfm_user = None                    # arg3
        self.start_date = None                  # arg4
        self.end_date = None                    # arg5
        self.wfm_proc_colab = None              # arg6
        self.child_number = None                # arg7
        self.unit_id = None
        self.secao_id = None
        self.postos_id = None
        
        # Initialize data placeholders - TODO: think of removing this
        self.raw_data = {}
        self.transformed_data = {}
        self.processing_results = {}

        # Process tracking
        self.stage_handler = ProcessStageHandler(process_manager=process_manager, config=CONFIG) if process_manager else None
        self.algorithm_results = {}
        
        logger.info("ExampleService initialized")

    def initialize_process(self, name: str, description: str) -> str:
        """
        Initialize a new process with the given name and description.
        
        Args:
            name: Process name
            description: Process description
            
        Returns:
            Process ID
        """
        logger.info(f"Initializing process: {name}")
        
        if self.stage_handler:
            # Initialize the process with the process manager
            self.current_process_id = self.stage_handler.initialize_process(name, description)
            logger.info(f"Process initialized with ID: {self.current_process_id}")
            return self.current_process_id
        else:
            # If no stage handler, just log and use a placeholder ID
            logger.info("Process tracking disabled (no process manager)")
            self.current_process_id = f"no_tracking_{datetime.now().strftime('%Y%m%d%H%M%S')}"
            return self.current_process_id

    def execute_stage(self, stage_name: str, algorithm_name: Optional[str] = None, 
                     algorithm_params: Optional[Dict[str, Any]] = None) -> bool:
        """
        Execute a specific stage in the process.
        
        Args:
            stage: Stage name to execute
            algorithm_name: Optional algorithm name for the processing stage
            algorithm_params: Optional parameters for the algorithm
            
        Returns:
            True if the stage executed successfully, False otherwise
        """
        try:
            logger.info(f"Executing process stage: {stage_name}")
            
            # Start stage in process manager if available
            if self.stage_handler:
                self.stage_handler.start_stage(stage_name, algorithm_name)

                if algorithm_name and algorithm_params:
                    # TODO: Check what is hapening here 
                    self.stage_handler.record_stage_decision(stage_name, algorithm_name, algorithm_params)                
            
            # Execute the appropriate stage
            if stage_name == "data_loading_raw":
                success = self._execute_data_loading_raw_stage()
            elif stage_name == "processing":
                success = self._execute_processing_stage()
            else:
                logger.error(f"Unknown stage name: {stage_name}")
                success = False
            
            # Complete stage in stage handler if available
            if self.stage_handler:
                result_data = {
                    "success": success,
                    "timestamp": datetime.now().isoformat()
                }
                
                if not success:
                    result_data["error"] = f"Stage {stage_name} failed"

                if algorithm_name and algorithm_name in self.algorithm_results:
                    # TODO: Record specific algorithm results in result_data, if thats the case
                    pass
                    
                self.stage_handler.complete_stage(stage_name, success, result_data)
            
            return success
            
        except Exception as e:
            logger.error(f"Error executing stage {stage_name}: {str(e)}", exc_info=True)
            
            # Complete stage with failure in process manager if available
            if self.stage_handler:
                self.stage_handler.complete_stage(
                    stage_name, 
                    False, 
                    {"error": str(e), "timestamp": datetime.now().isoformat()}
                )
            
            return False

    def _execute_data_loading_raw_stage(self) -> bool:
        """
        Execute the data loading stage.
        
        This stage loads data from the data source(s).
        
        Returns:
            True if successful, False otherwise
        """
        try:
            logger.info("Executing data loading raw stage")
            stage_name = "data_loading_raw"
            # Get decisions from process manager if available
            load_entities = ["valid_employees"]
            
            if self.stage_handler:
                # Get selection decisions if available
                selections = self.process_manager.get_stage_decision(1, "selections")
                if selections and isinstance(selections, dict):
                    # Get entity selection from decisions
                    selected_entities = selections.get("selected_entities")
                    if selected_entities and isinstance(selected_entities, list):
                        load_entities = selected_entities

            # Track progress
            if self.stage_handler:
                self.stage_handler.track_progress(
                    stage_name, 
                    0.1, 
                    "Starting data loading raw"
                )
            
            # Load each entity
            self.data = DataContainerDescansos()
            
            # Progress update
            if self.stage_handler:
                self.stage_handler.track_progress(
                    stage_name, 
                    0.3, 
                    "Starting to load raw data entities",
                    {"entities": load_entities}
                )

            valid_raw_loading = self.data.load_from_data_manager_raw(self.data_manager, load_entities)

            if not valid_raw_loading:
                if self.stage_handler:
                    self.stage_handler.track_progress(
                        stage_name,
                        0.0,
                        "Failed to load raw data.",
                        {"valid_raw_loading": valid_raw_loading}
                    )
                return False
            
            # Progress update
            if self.stage_handler:
                self.stage_handler.track_progress(
                    stage_name, 
                    0.5, 
                    "Starting to validate raw data entities",
                    {"loaded_entities": list(self.raw_data.keys())}
                )            
            
            valid_raw_data = self.data.validate_raw()

            if not valid_raw_data:
                if self.stage_handler:
                    self.stage_handler.track_progress(
                        stage_name,
                        0.0,
                        "Failed to validate raw data.",
                        {'valid_raw_data': valid_raw_data}
                    )
                return False

            # Get values for unit, secao e posto id (important process information)
            self.unit_id = self.data.raw_data[['FK_UNIDADE']].unique()
            self.secao_id = self.data.raw_data[['FK_SECAO']].unique()
            self.postos_id = self.data.raw_data[['FK_PERFIL']].unique()

            if self.wfm_proc_colab != 'NA':
                self.colab_matricula = self.wfm_proc_colab
            else:
                self.colab_matricula = None
            
            logger.info("Data loading stage completed successfully")

            if self.stage_handler:
                self.stage_handler.track_progress(
                    stage_name=stage_name,
                    progress=1.0,
                    message="Raw data loading complete",
                    metadata={
                        "valid_raw_loading_result": valid_raw_loading,
                        "valid_raw_data_result": valid_raw_data,
                        "unit_id": self.unit_id,
                        "secao_id": self.secao_id,
                        "posto_id": self.posto_id,
                        "colab_matricula": self.colab_matricula,
                        "data_shapes": {
                            "raw_data": self.data.raw_data['valid_employees'].shape if self.data.raw_data['valid_employees'] else None
                        }
                    }
                )

            return True
            
        except Exception as e:
            logger.error(f"Error in data loading stage: {str(e)}", exc_info=True)

            if self.stage_handler:
                self.stage_handler.track_progress(
                    "data_loading_raw"
                )
            return False

    def _execute_processing_stage(self, algorithm_name: Optional[str] = None, 
                                algorithm_params: Optional[Dict[str, Any]] = None) -> bool:
        """
        Execute the processing stage using substages. These substages could divided into various methos or the logic could be applied inside this method.
        This stage demonstrates using the substage feature and includes:
        1. connection: establish a connection to data source;
        2. load_matrixes: Load dataframes containing all the data;
        3. func_inicializa: Function that initializes data transformation for each matrix;
        4. allocation_cycle: Allocation cycle for all the required days;
        5. format_results: Format results to be inserted;
        6. insert_results: Insert results to the database.
        
        Args:
            algorithm_name: Name of the algorithm to use
            algorithm_params: Parameters for the algorithm
            
        Returns:
            True if successful, False otherwise
        """
        try:
            stage_name = 'processing'
            decisions = {}
            if self.stage_handler and self.process_manager:
                stage_sequence = self.stage_handler.stages[stage_name]['sequence']
                insert_results = self.process_manager.current_decisions.get(stage_sequence).get('insertions', {}).get('insert_results', False)
            for posto_id in self.postos_id:
                progress = 0.0
                if self.stage_handler:
                    self.stage_handler.start_substage('processing', 'connection')
                
                if self.stage_handler:
                    self.stage_handler.track_progress(
                        stage_name=stage_name,
                        progress=progress+0.1,
                        message="Starting the processing stage and consequent substages"
                    )
                # SUBSTAGE 1: connection
                valid_connection = self._execute_connection_substage()
                if not valid_connection:
                    if self.stage_handler:
                        self.stage_handler.track_progress(
                            stage_name=stage_name,
                            progress=0.0,
                            message="Error connecting to data source, returning False"
                        )
                    return False
                if self.stage_handler:
                    self.stage_handler.track_progress(
                        stage_name=stage_name,
                        progress=progress+0.2,
                        message="Valid connection established, advancing to next substage"
                    )

                # SUBSTAGE 2: load_matrices
                if self.stage_handler:
                    self.stage_handler.start_substage('processing', 'load_matrices')
                valid_loading_matrices = self._execute_load_matrices_substage(posto_id)
                if not valid_loading_matrices:
                    if self.stage_handler:
                        self.stage_handler.track_progress(
                            stage_name=stage_name,
                            progress=0.0,
                            message="Invalid matrices loading substage, returning False"
                        )
                    return False
                if self.stage_handler:
                    self.stage_handler.track_progress(
                        stage_name=stage_name,
                        progress=progress+0.3,
                        message="Valid matrices loading, advancing to the next substage"
                    )

                # SUBSTAGE 3: func_inicializa
                if self.stage_handler:
                    self.stage_handler.start_substage('processing', 'func_inicializa')
                valid_func_inicializa = self._execute_func_inicializa_substage()
                if not valid_func_inicializa:
                    if self.stage_handler:
                        self.stage_handler.track_progress(
                            stage_name=stage_name,
                            progress=0.0,
                            message="Invalid result in func_inicializa substage, returning False"
                        )
                    return False
                if self.stage_handler:
                    self.stage_handler.track_progress(
                        stage_name=stage_name,
                        progress=progress+0.4,
                        message="Valid func_inicializa, advancing to the next substage"
                    )

                # SUBSTAGE 4: allocation_cycle
                if self.stage_handler:
                    self.stage_handler.start_substage('processing', 'allocation_cycle')
                valid_allocation_cycle = self._execute_allocation_cycle_substage()
                if not valid_allocation_cycle:
                    if self.stage_handler:
                        self.stage_handler.track_progress(
                            stage_name=stage_name,
                            progress=0.0,
                            message="Invalid result in allocation_cycle substage, returning False"
                        )
                    return False
                if self.stage_handler:
                    self.stage_handler.track_progress(
                        stage_name=stage_name,
                        progress=progress+0.5,
                        message="Valid allocation_cycle, advancing to the next substage"
                    )

                # SUBSTAGE 5: format_results
                if self.stage_handler:
                    self.stage_handler.start_substage('processing', 'format_results')
                valid_format_results = self._execute_format_results_substage()
                if not valid_format_results:
                    if self.stage_handler:
                        self.stage_handler.track_progress(
                            stage_name=stage_name,
                            progress=0.0,
                            message="Invalid result in format_results substage, returning False"
                        )
                    return False
                if self.stage_handler:
                    self.stage_handler.track_progress(
                        stage_name=stage_name,
                        progress=progress+0.6,
                        message="Valid format_results, advancing to the next substage"
                    )

                # SUBSTAGE 6: insert_results
                if insert_results:
                    if self.stage_handler:
                        self.stage_handler.start_substage('processing', 'insert_results')
                    valid_insert_results = self._execute_insert_results_substage()
                    if not valid_insert_results:
                        if self.stage_handler:
                            self.stage_handler.track_progress(
                                stage_name=stage_name,
                                progress=0.0,
                                message="Invalid result in insert_results substage, returning False"
                            )
                        return False
                    if self.stage_handler:
                        self.stage_handler.track_progress(
                            stage_name=stage_name,
                            progress=progress+0.7,
                            message="Valid insert_results, advancing to the next substage"
                        )

            # TODO: Needs to ensure it inserted it correctly?
            if self.stage_handler:
                self.stage_handler.track_progress(
                    stage_name=stage_name,
                    progress=1.0,
                    message="Finnished processing stage with success. Returnig True."
                )
            return True

        except Exception as e:
            logger.error(f"Error in processing stage: {str(e)}", exc_info=True)
            return False

    def _execute_result_analysis_stage(self) -> bool:
        """
        Execute the result analysis stage.
        
        This stage analyzes the processing results and saves the output.
        
        Returns:
            True if successful, False otherwise
        """
        # Implement the logic if needed
        pass

    def _execute_connection_substage(self) -> bool:
        """
        Execute the processing substage of connection. This could be implemented as a method or directly on the _execute_processing_stage() method
        """
        try:
            logger.info("Connecting to data source")
            
            # Establish connection to data source
            self.data_manager.connect()
            
            # Track progress for the connection substage
            if self.stage_handler:
                self.stage_handler.track_substage_progress(
                    "processing", 
                    "connection",
                    1.0,  # 100% complete
                    "Connection established successfully"
                )
                self.stage_handler.complete_substage(
                    "data_loading", 
                    "connection", 
                    True, 
                    {"connection_info": "Connected to data source"}
                )
            return True
    
        except Exception as e:
            logger.error(f"Error connecting to data source: {str(e)}")
            if self.stage_handler:
                self.stage_handler.complete_substage(
                    "data_loading", 
                    "connection", 
                    False, 
                    {"error": str(e)}
                )
            return False
        
    def _execute_load_matrices_substage(self, posto_id: int) -> bool:
        """
        Execute the processing substage of load_matrices. This could be implemented as a method or directly on the _execute_processing_stage() method
        """
        logger.info()
        if not posto_id:
            # TODO: do something, likely raise error
            if self.stage_handler:
                self.stage_handler.complete_substage(
                    stage_name="processing", 
                    substage_name="load_matrices",
                    success=False,
                    result_data={
                        'posto_id': posto_id,
                        'message': "No posto_id provided"
                    }
                )
            return False

        try:
            success = self.data.load_from_data_manager(self.data_manager)
            # TODO: needs to be removed or just logged
            if not success:
                logger.warning("Loading matrices unsuccessful, returning false.")
                if self.stage_handler:
                    self.stage_handler.complete_substage(
                        stage_name="processing",
                        substage_name="load_matrices",
                        success=False
                    )
                return False
            
            if self.stage_handler:
                self.stage_handler.track_substage_progress(
                    stage_name="processing",
                    substage_name="load_matrices",
                    progress=0.5,
                    message="Load matrices successful, running validations."
                )

            validation_result = self.data.validate_raw()
            logger.info(f"load_matrices returning: {validation_result}")
            if self.stage_handler:
                self.stage_handler.complete_substage(
                    stage_name="processing",
                    substage_name="load_matrices",
                    success=True,
                    result_data={
                        'load_matrices_success': success,
                        'validation_result': validation_result,
                        'data': self.data.raw_data
                    }
                )
            return validation_result
        except Exception as e:
                logger.error(f"Error loading matrices: {str(e)}")
                if self.stage_handler:
                    self.stage_handler.complete_substage(
                        stage_name="data_loading", 
                        substage_name="load_matrices", 
                        success=False, 
                        result_data={"error": str(e)}
                    )
                return False

    def _execute_func_inicializa_substage(self) -> bool:
        """
        Execute the processing substage of func_inicializa. This could be implemented as a method or directly on the _execute_processing_stage() method.
        """
        try:
            logger.info()
            success = self.data.func_inicializa()
            if not success:
                logger.warning("Performing func_inicializa unsuccessful, returning False")
                if self.stage_handler:
                    self.stage_handler.complete_substage(
                        stage_name='processing',
                        substage_name='func_inicializa',
                        success=False
                    )
                return False
            
            if self.stage_handler:
                self.stage_handler.track_substage_progress(
                    stage_name='processing',
                    substage_name='func_inicializa',
                    progress=0.5,
                    message="func_inicializa successful, running validations"
                )
            
            validation_result = self.data.validate_func_inicializa()
            logger.info(f"func_inicializa returning: {validation_result}")
            if self.stage_handler:
                self.stage_handler.complete_substage(
                    stage_name='processing',
                    substage_name='func_inicializa',
                    success=True,
                    result_data={
                        'func_inicializa_success': success,
                        'validation_result': validation_result,
                        'data': self.data.transformed_data
                    }
                )
            return validation_result
        except Exception as e:
            logger.error()
            if self.stage_handler:
                self.stage_handler.complete_substage(
                    "processing", 
                    "func_inicializa", 
                    False, 
                    {"error": str(e)}
                )
            return False

    def _execute_allocation_cycle_substage(self) -> bool:
        """
        Execute the processing substage of allocation_cycle. This could be implemented as a method or directly on the _execute_processing_stage() method.
        """
        try:
            logger.info()
            success = self.data.allocation_cycle()
            if not success:
                logger.warning("Performing allocation_cycle unsuccessful, returning False")
                if self.stage_handler:
                    self.stage_handler.complete_substage(
                        stage_name='processing',
                        substage_name='allocation_cycle',
                        success=False
                    )
                return False
            
            if self.stage_handler:
                self.stage_handler.track_substage_progress(
                    stage_name='processing',
                    substage_name='allocation_cycle',
                    progress=0.5,
                    message="allocation_cycle successful, running validations"
                )
            
            validation_result = self.data.validate_allocation_cycle()
            logger.info(f"allocation_cycle returning: {validation_result}")
            if self.stage_handler:
                self.stage_handler.complete_substage(
                    stage_name='processing',
                    substage_name='allocation_cycle',
                    success=True,
                    result_data={
                        'allocation_cycle_success': success,
                        'validation_result': validation_result,
                        'data': self.data.result_data
                    }
                )
            return validation_result
        except Exception as e:
            logger.error()
            if self.stage_handler:
                self.stage_handler.complete_substage(
                    "data_loading", 
                    "allocation_cycle", 
                    False, 
                    {"error": str(e)}
                )
            return False

    def _execute_format_results_substage(self) -> bool:
        """
        Execute the processing substage of format_results for insertion. This could be implemented as a method or directly on the _execute_processing_stage() method.
        """
        try:
            logger.info()
            success = self.data.format_results()
            if not success:
                logger.warning("Performing allocation_cycle unsuccessful, returning False")
                if self.stage_handler:
                    self.stage_handler.complete_substage(
                        stage_name='processing',
                        substage_name='format_results',
                        success=False
                    )
                return False
            
            if self.stage_handler:
                self.stage_handler.track_substage_progress(
                    stage_name='processing',
                    substage_name='format_results',
                    progress=0.5,
                    message="format_results successful, running validations"
                )
            
            validation_result = self.data.validate_format_results()
            logger.info(f"format_results returning: {validation_result}")
            if self.stage_handler:
                self.stage_handler.complete_substage(
                    stage_name='processing',
                    substage_name='format_results',
                    success=True,
                    result_data={
                        'format_results_success': success,
                        'validation_result': validation_result,
                        'data': self.data.formated_data
                    }
                )
            return validation_result
        except Exception as e:
            logger.error()
            if self.stage_handler:
                self.stage_handler.complete_substage(
                    "processing", 
                    "format_results", 
                    False, 
                    {"error": str(e)}
                )
            return False

    def _execute_insert_results_substage(self) -> bool:
        """
        Execute the processing substage of insert_result.  This could be implemented as a method or directly on the _execute_processing_stage() method.
        """
        try:
            logger.info()
            success = self.data.insert_results()
            if not success:
                logger.warning("Performing allocation_cycle unsuccessful, returning False")
                if self.stage_handler:
                    self.stage_handler.complete_substage(
                        stage_name='processing',
                        substage_name='insert_results',
                        success=False
                    )
                return False
            
            if self.stage_handler:
                self.stage_handler.track_substage_progress(
                    stage_name='processing',
                    substage_name='insert_results',
                    progress=0.5,
                    message="insert_results successful, running validations"
                )

            validation_result, valid_insertions = self.data.validate_insert_results()
            logger.info(f"allocation_cycle returning: {validation_result}")
            if self.stage_handler:
                self.stage_handler.complete_substage(
                    stage_name='processing',
                    substage_name='insert_results',
                    success=True,
                    result_data={
                        'insert_results_success': success,
                        'validation_result': validation_result,
                        'valid_insertions': valid_insertions
                    }
                )
            return validation_result            
        except Exception as e:
            logger.error()
            if self.stage_handler:
                self.stage_handler.complete_substage(
                    "processing", 
                    "insert_results", 
                    False, 
                    {"error": str(e)}
                )
            return False            

    def finalize_process(self) -> None:
        """Finalize the process and clean up any resources."""
        logger.info("Finalizing process")
        
        # Nothing to do if no process manager
        if not self.stage_handler:
            return
        
        # Log completion
        logger.info(f"Process {self.current_process_id} completed")

    def get_process_summary(self) -> Dict[str, Any]:
        """
        Get a summary of the current process.
        
        Returns:
            Dictionary with process summary information
        """
        if self.stage_handler:
            return self.stage_handler.get_process_summary()
        else:
            return {
                "status": "no_tracking",
                "process_id": self.current_process_id
            }

    def get_stage_decision(self, stage: int, decision_name: str) -> Optional[Dict[str, Any]]:
        """
        Get a specific decision for a stage from the process manager.
        
        Args:
            stage: Stage number
            decision_name: Name of the decision
            
        Returns:
            Decision dictionary or None if not available
        """
        if self.process_manager:
            return self.process_manager.get_stage_decision(stage, decision_name)
        return None